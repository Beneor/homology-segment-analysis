import gzip
import re

from segmentanalysis.segmentutils import strToBed


def openMaybeGzipped(fileName):
    """
    Determines theter input file is gzip-compressed and returns file handler via gzip / text file correspondingly
    :param fileName : Name of file to open
    :return: file handler to read lines
    """
    return gzip.open(fileName, 'rt') if fileName.endswith('.gz') else open(fileName, 'r')


def readFasta(fastaFile):
    """
    Reads genome from fasta file
    :param fastaFile : Input file to read sequences
    :return: dictionary {'chromosomeID':'ChromosomeSequence'}
    """
    genome = {}  # Dictionary of chromosomes
    chrId = ''
    chrSeq = []
    for line in fastaFile:
        if line[0] == '>':  # Next fasta record
            if chrId != '':  # Dumping current fast record
                genome[chrId] = ''.join(chrSeq).lower()
            chrId = re.search(r'>([-_A-z0-9]+)\s|$', line).group(1)  # Extracting new chromosome ID
            chrSeq = []
        else:
            chrSeq.append(line.strip())
    genome[chrId] = ''.join(chrSeq).lower()  # Adding to dictionary last readed chromosome
    return genome


def readList(filename):
    """
    Reads strings from file and returns it as a list
    filename: file name to read strings
    :return: list of strings read from file filename
    """
    return [line.strip() for line in open(filename).readlines()]


def dumpFragmentsToFile(fragmentsFileName, fragmentsPositions):
    """
    Writes set of fragments to file
    dumpFile: file stream to write data
    fragmentsPositions: dictionary with fragments and positions generated by segmentsearch.searchFragments() function
    """
    fragmentsFile = open(fragmentsFileName, 'w')
    for chromosome in fragmentsPositions.keys():
        sortedFragments = sorted(fragmentsPositions[chromosome].keys())
        for fragment in sortedFragments:
            fragmentString = '{}\t{:}\t{}\n'.format(chromosome, fragment,
                                                       ','.join(
                                                           [str(i) for i in fragmentsPositions[chromosome][fragment]]))
            fragmentsFile.write(fragmentString)
    fragmentsFile.close()


def dumpNCounts(countsFileName, nCounts, chunkSize):
    """
    writes calculated counts of fragments to text file
    :param countsFileName: name of file to write
    :param nCounts: dictionary containing normalized counts data from normalizeCounts function
    :param chunkSize:  size of one chunk
    """
    countsFile = open(countsFileName, 'w')
    for chromosome in nCounts.keys():
        for chunk, nCount in enumerate(nCounts[chromosome]):
            start, stop = chunk * chunkSize, (chunk + 1) * chunkSize - 1
            countString = '{0}\t{1}\t{2}\t{0}chunk{3}\t{4:10.5f}\n'.format(chromosome, start, stop, chunk, nCount)
            countsFile.write(countString)
    countsFile.close()


def readBedFile(BedFileName):
    """
    Reads Information from file in BED notation. only 5 BED columns are supported
    :param BedFileName: name of
    :return: cytomap - list of GenomeInterval objects
    """
    bedFile = open(BedFileName)
    genomeFeatures = []
    IDs = set()
    for nLine, line in enumerate(bedFile):
        if line.strip()[0] == '#':  # Skipping comment
            continue
        interval = strToBed(line)
        genomeFeatures.append(interval)
        if interval.ID in IDs:
            print("WARNING: Non-unique interval ID {} at line {}".format(interval.ID, nLine))
        IDs.add(interval.ID)

    return genomeFeatures


def dumpCytoCouns(cytoCountsFileName, cytomap, cytoCounts):
    """
    Writes cytomap counts to BED file : cytobans genome coordinates, band ID and counts
    :param cytoCountsFileName: name of file to write
    :param cytomap: list of GenomeInterval objects representing cytomap
    :param cytoCounts: Numpy array of counts in the same order, as in cytomap list
    :return:
    """
    cytoCountsFile = open(cytoCountsFileName, 'w')
    for i, interval in enumerate(cytomap):
        cytoCountsStr = '{}\t{}\t{}\t{}\t{}\n'.format(
            interval.chromosome, interval.start, interval.stop, interval.ID, cytoCounts[i])
        cytoCountsFile.write(cytoCountsStr)