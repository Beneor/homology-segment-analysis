# This module contains set of small service functions

import re

class GenomeInterval:
    '''
    This class represents information about one genome interval in BED notation: chromosome, start and stop
    '''
    def __init__(self, chromosome, start, stop):
        self.chromosome = chromosome
        self.start = start
        self.stop = stop
        

def segmentStrToGGenomeInterval(segmentStr, genome=None):
    chromosome = segmentStr.split(':')[0]
    start, stop  = [int(coord) for coord in segmentStr.split(':')[1:]]
    if genome is not None:
        if not chromosome in genome.keys():
            print("Unknown chromosome id for loaded genome: {}".format(chromosome))
            print("Valid chromosomes are: " + ','.join(genome.keys()))
            exit(-1)
        if (start >= stop) or (stop > len(genome[chromosome])):
            print("Segment coordinates {}:{} are incorrect or greater then chromosome {} size: {}".format(
                start, stop, chromosome, len(genome[chromosome])))
            exit(-2)
    return GenomeInterval(chromosome, start,stop)

def complement(sequence):
    """
    Make compliment of input sequence
    :param sequence: DNA sequence to make compliment
    :return:
    """
    basecomplement = {'a': 't', 'c': 'g', 'g': 'c', 't': 'a', 'n': 'n'}
    return ''.join([basecomplement[base] for base in sequence])

def revcomp(sequence):
    """
    Make reverse-compliment of input sequence
    :param sequence: DNA sequence to revcomp
    :return:
    """
    return complement(sequence)[::-1]

def readFasta(fastaFile):
    """
    Reads genome from fasta file
    :param fastaFile : Input file to read sequences
    :return: dictionary {'chromosomeID':'ChromosomeSequence'}
    """
    genome = {} # Dictionary of chromosomes
    chrId = ''
    chrSeq = []
    for line in fastaFile:
        if line[0] == '>': # Next fasta record
            if chrId != '':     # Dumping current fast record
                genome[chrId] = ''.join(chrSeq).lower()
            chrId = re.search(r'>([A-z0-9]+) ',line).group(1) # Extracting new chromosome ID
            chrSeq=[]
        else:
            chrSeq.append(line.strip())
    genome[chrId] = ''.join(chrSeq).lower() # Adding to dictionary last readed chromosome
    return genome

def dumpFragmentsToFile(fragmentsFileName, fragmentsPositions):
    """
    Writes set of fragments to file
    dumpFile: file stream to write data
    fragmentsPositions: dictionary with fragments and positions generated by segmentsearch.searchFragments() function
    """
    fragmentsFile = open(fragmentsFileName, 'w')
    for chromosome in fragmentsPositions.keys():
        sortedFragments=sorted(fragmentsPositions[chromosome].keys())
        for fragment in sortedFragments:
            fragmentString = '{}\t{:35}\t {}\n'.format(chromosome,fragment, 
                ','.join([str(i) for i in fragmentsPositions[chromosome][fragment]]))
            fragmentsFile.write(fragmentString)
    fragmentsFile.close()

def dumpCountsToFile(countsFileName, nCounts, chunkSize):
    countsFile = open(countsFileName, 'w')
    for chromosome in nCounts.keys():
        for chunk,nCount in enumerate(nCounts[chromosome]):
            start,stop = chunk*chunkSize, (chunk+1)*chunkSize - 1
            countString = '{}\t{}\t{}\t{:10.5f}\n'.format(chromosome, start,stop, nCount)
            countsFile.write(countString)
    countsFile.close()
